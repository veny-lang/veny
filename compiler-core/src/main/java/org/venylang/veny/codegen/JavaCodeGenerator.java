/*
 * Copyright 2025 Stoyan Petkov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package org.venylang.veny.codegen;

import org.venylang.veny.parser.ast.*;
import org.venylang.veny.parser.ast.expression.*;
import org.venylang.veny.parser.ast.statement.*;

import java.time.LocalDate;

/**
 * A visitor implementation that generates Java source code from a Veny AST.
 * <p>
 * This generator traverses the abstract syntax tree (AST) using the visitor pattern
 * and builds formatted Java code using a {@link CodeBuilder}. Currently, only class
 * and field declarations are partially implemented; other visit methods are placeholders.
 * </p>
 *
 * <p>Usage example:
 * <pre>{@code
 * Program ast = ... // Veny AST
 * JavaCodeGenerator generator = new JavaCodeGenerator();
 * String javaCode = ast.accept(generator);
 * System.out.println(javaCode);
 * }</pre>
 *
 * <p>The generated output includes a standard file header indicating that it was
 * auto-generated by the Veny compiler. This helps prevent manual edits and aids traceability.</p>
 *
 * @see AstVisitor
 * @see CodeBuilder
 */
public class JavaCodeGenerator implements AstVisitor<Void> {
    private final CodeBuilder builder = new CodeBuilder();

    private JavaCodeGenerator() {}

    /**
     * Factory method to generate code from a given Program node.
     *
     * @param program the root AST node
     * @return an instance of JavaCodeGenerator with code ready to fetch
     */
    public static JavaCodeGenerator of(Program program) {
        JavaCodeGenerator generator = new JavaCodeGenerator();
        program.accept(generator);
        return generator;
    }

    /**
     * Returns the generated Java source code as a string.
     */
    public String getCode() {
        return builder.build();
    }

    @Override
    public Void visitProgram(Program node) {
        builder.appendRawLine(generateFileHeader("Veny", LocalDate.now().toString()))
                .appendRawLine(""); // blank line after header

        for (VenyFile file : node.files()) {
            file.accept(this);
            builder.appendRawLine(""); // separate files
        }
        return null;
    }

    @Override
    public Void visitVenyFile(VenyFile node) {
        if (node.packageName() != null && !node.packageName().isEmpty()) {
            builder.appendLine("package " + node.packageName() + ";");
            builder.appendRawLine(""); // blank line after package
        }

        for (String imp : node.imports()) {
            builder.appendLine("import " + imp + ";");
        }

        if (!node.imports().isEmpty()) {
            builder.appendRawLine(""); // blank line after imports
        }

        for (ClassDecl cls : node.classes()) {
            cls.accept(this);
            builder.appendRawLine(""); // separate classes
        }

        return null;
    }

    @Override
    public Void visitClassDecl(ClassDecl node) {
        builder.appendLine("public class " + node.name() + " {")
                .indent();

        for (VarDecl field : node.fields()) {
            field.accept(this);
        }

        if (!node.fields().isEmpty() && !node.methods().isEmpty()) {
            builder.appendRawLine(""); // separate fields from methods
        }

        for (MethodDecl method : node.methods()) {
            method.accept(this);
            builder.appendRawLine(""); // separate methods
        }

        builder.unindent()
                .appendLine("}");

        return null;
    }

    @Override
    public Void visitVarDecl(VarDecl node) {
        String visibility = node.visibility().toString().toLowerCase();
        String line = visibility + " " + node.typeName() + " " + node.name() + ";";
        builder.appendLine(line);
        return null;
    }

    @Override
    public Void visitMethodDecl(MethodDecl node) {
        String visibility = node.visibility().toString().toLowerCase();
        StringBuilder params = new StringBuilder();

        for (int i = 0; i < node.parameters().size(); i++) {
            var param = node.parameters().get(i);
            params.append(param.type()).append(" ").append(param.name());
            if (i < node.parameters().size() - 1) {
                params.append(", ");
            }
        }

        builder.appendLine(visibility + " " + node.returnType() + " " + node.name() + "(" + params + ") {")
                .indent();

        for (Statement stmt : node.body()) {
            stmt.accept(this);
        }

        builder.unindent().appendLine("}");
        return null;
    }

    @Override
    public Void visitBlockStmt(BlockStmt node) {
        return null;
    }

    @Override
    public Void visitIfStmt(IfStmt node) {
        return null;
    }

    @Override
    public Void visitWhileStmt(WhileStmt node) {
        return null;
    }

    @Override
    public Void visitForStmt(ForStmt node) {
        return null;
    }

    @Override
    public Void visitReturnStmt(ReturnStmt node) {
        return null;
    }

    @Override
    public Void visitExprStmt(ExprStmt node) {
        return null;
    }

    @Override
    public Void visitVarStmt(VarStmt node) {
        return null;
    }

    @Override
    public Void visitValStmt(ValStmt node) {
        return null;
    }

    @Override
    public Void visitBinaryExpr(BinaryExpr node) {
        return null;
    }

    @Override
    public Void visitUnaryExpr(UnaryExpr node) {
        return null;
    }

    @Override
    public Void visitLiteralExpr(LiteralExpr node) {
        return null;
    }

    @Override
    public Void visitVariableExpr(VariableExpr node) {
        return null;
    }

    @Override
    public Void visitAssignExpr(AssignExpr node) {
        return null;
    }

    @Override
    public Void visitCallExpr(CallExpr node) {
        return null;
    }

    @Override
    public Void visitNewExpr(NewExpr node) {
        return null;
    }

    @Override
    public Void visitGetExpr(GetExpr node) {
        return null;
    }

    @Override
    public Void visitSetExpr(SetExpr node) {
        return null;
    }

    @Override
    public Void visitBreakStmt(BreakStmt breakStmt) {
        return null;
    }

    @Override
    public Void visitContinueStmt(ContinueStmt continueStmt) {
        return null;
    }

    /**
     * Returns a standard auto-generated file header.
     *
     * @param generatorName the name of the generator (e.g., "Veny")
     * @param timestamp generation timestamp (e.g., from LocalDate.now() or similar)
     * @return the formatted header string
     */
    private String generateFileHeader(String generatorName, String timestamp) {
        return String.join("\n",
                "// ------------------------------------------------------------------------------",
                "// <auto-generated>",
                "//     This code was generated by " + generatorName + "`s Java Code Generator.",
                "//",
                "//     Changes to this file may be lost if the code is regenerated.",
                "//     Generated on: " + timestamp,
                "// </auto-generated>",
                "// ------------------------------------------------------------------------------"
        );
    }
}
