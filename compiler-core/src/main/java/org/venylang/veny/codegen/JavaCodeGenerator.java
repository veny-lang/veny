/*
 * Copyright 2025 Stoyan Petkov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package org.venylang.veny.codegen;

import org.venylang.veny.parser.ast.*;
import org.venylang.veny.parser.ast.expression.*;
import org.venylang.veny.parser.ast.statement.*;

import java.time.LocalDate;

/**
 * A visitor implementation that generates Java source code from a Veny AST.
 * <p>
 * This generator traverses the abstract syntax tree (AST) using the visitor pattern
 * and builds formatted Java code using a {@link CodeBuilder}. Currently, only class
 * and field declarations are partially implemented; other visit methods are placeholders.
 * </p>
 *
 * <p>Usage example:
 * <pre>{@code
 * Program ast = ... // Veny AST
 * JavaCodeGenerator generator = new JavaCodeGenerator();
 * String javaCode = ast.accept(generator);
 * System.out.println(javaCode);
 * }</pre>
 *
 * <p>The generated output includes a standard file header indicating that it was
 * auto-generated by the Veny compiler. This helps prevent manual edits and aids traceability.</p>
 *
 * @see AstVisitor
 * @see CodeBuilder
 */
public class JavaCodeGenerator implements AstVisitor<String> {
    private final CodeBuilder builder = new CodeBuilder();

    @Override
    public String visitProgram(Program node) {
        builder.appendRawLine(generateFileHeader("Veny", LocalDate.now().toString()))
                .appendLine("");

        for (ClassDecl decl : node.classes()) {
            decl.accept(this);
            builder.appendLine(""); // Separate declarations
        }

        return builder.build();
    }

    @Override
    public String visitClassDecl(ClassDecl node) {
        builder.appendLine("public class " + node.name() + " {")
                .indent();

        for (VarDecl field : node.fields()) {
            field.accept(this);
        }

        for (MethodDecl method : node.methods()) {
            method.accept(this);
        }

        builder.unindent().appendLine("}");
        return null;
    }

    @Override
    public String visitVarDecl(VarDecl node) {
        return "";
    }

    @Override
    public String visitMethodDecl(MethodDecl node) {
        return "";
    }

    @Override
    public String visitBlockStmt(BlockStmt node) {
        return "";
    }

    @Override
    public String visitIfStmt(IfStmt node) {
        return "";
    }

    @Override
    public String visitWhileStmt(WhileStmt node) {
        return "";
    }

    @Override
    public String visitForStmt(ForStmt node) {
        return "";
    }

    @Override
    public String visitReturnStmt(ReturnStmt node) {
        return "";
    }

    @Override
    public String visitExprStmt(ExprStmt node) {
        return "";
    }

    @Override
    public String visitVarStmt(VarStmt node) {
        return "";
    }

    @Override
    public String visitValStmt(ValStmt node) {
        return "";
    }

    @Override
    public String visitBinaryExpr(BinaryExpr node) {
        return "";
    }

    @Override
    public String visitUnaryExpr(UnaryExpr node) {
        return "";
    }

    @Override
    public String visitLiteralExpr(LiteralExpr node) {
        return "";
    }

    @Override
    public String visitVariableExpr(VariableExpr node) {
        return "";
    }

    @Override
    public String visitAssignExpr(AssignExpr node) {
        return "";
    }

    @Override
    public String visitCallExpr(CallExpr node) {
        return "";
    }

    @Override
    public String visitNewExpr(NewExpr node) {
        return "";
    }

    @Override
    public String visitGetExpr(GetExpr node) {
        return "";
    }

    @Override
    public String visitSetExpr(SetExpr node) {
        return "";
    }

    @Override
    public String visitBreakStmt(BreakStmt breakStmt) {
        return "";
    }

    @Override
    public String visitContinueStmt(ContinueStmt continueStmt) {
        return "";
    }

    /**
     * Returns a standard auto-generated file header.
     *
     * @param generatorName the name of the generator (e.g., "Veny")
     * @param timestamp generation timestamp (e.g., from LocalDate.now() or similar)
     * @return the formatted header string
     */
    private String generateFileHeader(String generatorName, String timestamp) {
        return String.join("\n",
                "// ------------------------------------------------------------------------------",
                "// <auto-generated>",
                "//     This code was generated by " + generatorName + "`s Java Code Generator.",
                "//",
                "//     Changes to this file may be lost if the code is regenerated.",
                "//     Generated on: " + timestamp,
                "// </auto-generated>",
                "// ------------------------------------------------------------------------------"
        );
    }
}
